generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuarios {
  id             Int      @id @default(autoincrement())
  nome           String
  sobrenome      String
  dataNascimento DateTime

  endereco    String?
  cep         String?
  rua         String?
  numero      String?
  complemento String?
  bairro      String?
  cidade      String?
  estado      String?

  email    String @unique
  telefone String
  senha    String
  posicao  String @default("USER")

  isEmailVerified   Boolean   @default(false)
  emailVerifyToken  String?
  emailTokenExpires DateTime?

  resetToken        String?
  resetTokenExpires DateTime?

  pedidos Pedidos[] // Um usuário pode ter vários pedidos
}

model produtos {
  id               String          @id @default(cuid())
  nome             String
  descricao        String          @db.VarChar(500)
  preco            Float
  quantidade       Int
  cor              Cor
  tamanho          Tamanho
  categoria        Categoria
  ocasiao          Ocasiao?
  precoPromocional Float?
  ativo            Boolean         @default(true)
  imagens          ProdutoImagem[]

  itensPedido ItemPedido[]
}

model ProdutoImagem {
  id      String @id @default(uuid())
  urls    Json // large, medium, thumbnail
  posicao Int    @default(0)

  produtoId String
  produto   produtos @relation(fields: [produtoId], references: [id], onDelete: Cascade)

  @@map("produto_imagens")
}

model Pedidos {
  id             String       @id @default(uuid())
  criadoEm       DateTime     @default(now())
  status         StatusPedido @default(CARRINHO)
  usuarioId      Int
  pagamento      Pagamentos?
  dataFinalizado DateTime?
  codigoRastreio String?

  enderecoEntrega String?
  cep             String?
  rua             String?
  numero          String?
  complemento     String?
  bairro          String?
  cidade          String?
  estado          String?

  usuario Usuarios     @relation(fields: [usuarioId], references: [id])
  itens   ItemPedido[] // Um pedido tem vários itens
}

model ItemPedido {
  id            Int    @id @default(autoincrement())
  pedidoId      String
  produtoId     String
  quantidade    Int
  precoUnitario Float?

  pedido  Pedidos  @relation(fields: [pedidoId], references: [id])
  produto produtos @relation(fields: [produtoId], references: [id], onDelete: Cascade)
}

model Pagamentos {
  id       String          @id @default(uuid())
  pedidoId String          @unique
  status   StatusPagamento
  metodo   MetodoPagamento

  valorProdutos         Float // Subtotal de todos os itens (soma de ItemPedido.precoUnitario * quantidade)
  valorFrete            Float
  valorTaxaCartao       Float? // Taxa base cobrada pelo gateway (ex: 1.99%)
  valorTaxaParcelamento Float? // Custo adicional das parcelas
  descontos             Float? // Valor de cupons, se houver
  valorTotal            Float // A soma final que o cliente pagou (valorProdutos + frete + taxas - descontos)

  parcelas Int?
  gatewayTransactionId    String?  // ID da transação no Mercado Pago, para reconciliação
  criadoEm DateTime @default(now())

  pedido Pedidos @relation(fields: [pedidoId], references: [id])
}

model CarrosselImagem {
  id      String  @id @default(uuid())
  urls    Json
  posicao Int     @default(0)
  ativo   Boolean @default(true)
  link    String?

  createdAt DateTime @default(now())

  @@map("carrossel_imagens")
}

enum StatusPedido {
  CARRINHO
  AGUARDANDO_PAGAMENTO
  PAGO
  ENVIADO
  ENTREGUE
  CANCELADO
}

enum StatusPagamento {
  PENDENTE
  APROVADO
  FALHOU
}

enum MetodoPagamento {
  CARTAO
  BOLETO
  PIX
}

enum Tamanho {
  P
  M
  G
  GG
}

enum Cor {
  VERMELHO
  AZUL
  AMARELO
  VERDE
  PRETO
  BRANCO
  ROSA
  CINZA
  BEGE
  ROXO
  LARANJA
  MARROM
  PRATA
  DOURADO
}

enum Categoria {
  SAIA
  SHORT
  CALÇA
  BLUSA
  CAMISA
  CONJUNTOS
  VESTIDO
  CALCADO
  ACESSORIOS
  OUTROS
}

enum Ocasiao {
  CASAMENTO
  BATIZADO
  MADRINHAS
  FORMATURA
  OCASIOES_ESPECIAIS
  CASUAL
  FESTAS
  OUTROS
}
